const isIPv4Address = (addr: string): boolean => {
    // TODO: More strict validation
    return /^([0-2]?\d?\d\.){3}[0-2]?\d?\d$/.test(addr);
}

const isIPv6Address = (addr: string): boolean => {
    // TODO: More strict validation
    return /^([0-9a-f]{0,4}:)([0-9a-f]{1,4}:?|::){0,6}(:[0-9a-f]{0,4})$/i.test(addr);
}

const isIPv6AddressWithoutEmpty = (addr: string): boolean => {
    return /^([0-9a-f]{4}:){7}[0-9a-f]{4}$/i.test(addr);
}

const convertToIPv6AddressWithoutEmptyAndSeparator = (fromIp: string): string | null => {
    const shorten = fromIp.split('::');
    if (shorten.length > 2) {
        return null;
    }
    const beg = shorten[0].split(':');
    const end = shorten.length == 2 ? shorten[1].split(':') : [];
    const lsec = 8 - beg.length - end.length;
    let secs = '';
    [beg, Array(lsec).fill('0'), end].forEach(i => i.forEach(v => {
        secs += ('0'.repeat(4 - v.length) + v);
    }))
    return secs;
}

const convertToIPv6AddressWithoutEmpty = (fromIp: string): string | null => {
    if (!isIPv6Address(fromIp))
        return null;
    const nonSeparator = convertToIPv6AddressWithoutEmptyAndSeparator(fromIp);
    if (nonSeparator === null)
        return null;

    let result = '';
    for (let i = 0; i < 8; i++) {
        result += nonSeparator.substring(i * 4, (i * 4) + 4) + ':';
    }
    result = result.substring(0, result.length - 1);
    return result;
}

const getPtrAcceptableAddress = (fromIp: string): string | null => {
    if (isIPv4Address(fromIp)) {
        // v4 convert
        const splitted = fromIp.split('.');
        const ret = `${parseInt(splitted[3])}.${parseInt(splitted[2])}.${parseInt(splitted[1])}.${parseInt(splitted[0])}`
            + '.in-addr.arpa.';
        return ret;
    } else if (isIPv6Address(fromIp)) {
        // v6 convert
        const secs = convertToIPv6AddressWithoutEmptyAndSeparator(fromIp);
        if (secs === null)
            return null;
        const result = secs.split('').reverse().join('.') + '.ip6.arpa.';
        return result;
    } else {
        return null;
    }
}

const IPv4OctetBasedNetMasks = [[0, 0, 0, 0], [128, 0, 0, 0], [192, 0, 0, 0], [224, 0, 0, 0], [240, 0, 0, 0], [248, 0, 0, 0], [252, 0, 0, 0], [254, 0, 0, 0], [255, 0, 0, 0], [255, 128, 0, 0], [255, 192, 0, 0], [255, 224, 0, 0], [255, 240, 0, 0], [255, 248, 0, 0], [255, 252, 0, 0], [255, 254, 0, 0], [255, 255, 0, 0], [255, 255, 128, 0], [255, 255, 192, 0], [255, 255, 224, 0], [255, 255, 240, 0], [255, 255, 248, 0], [255, 255, 252, 0], [255, 255, 254, 0], [255, 255, 255, 0], [255, 255, 255, 128], [255, 255, 255, 192], [255, 255, 255, 224], [255, 255, 255, 240], [255, 255, 255, 248], [255, 255, 255, 252], [255, 255, 255, 254], [255, 255, 255, 255]];
const IPv6OctetBasedNetMasks = [[0, 0, 0, 0, 0, 0, 0, 0], [32768, 0, 0, 0, 0, 0, 0, 0], [49152, 0, 0, 0, 0, 0, 0, 0], [57344, 0, 0, 0, 0, 0, 0, 0], [61440, 0, 0, 0, 0, 0, 0, 0], [63488, 0, 0, 0, 0, 0, 0, 0], [64512, 0, 0, 0, 0, 0, 0, 0], [65024, 0, 0, 0, 0, 0, 0, 0], [65280, 0, 0, 0, 0, 0, 0, 0], [65408, 0, 0, 0, 0, 0, 0, 0], [65472, 0, 0, 0, 0, 0, 0, 0], [65504, 0, 0, 0, 0, 0, 0, 0], [65520, 0, 0, 0, 0, 0, 0, 0], [65528, 0, 0, 0, 0, 0, 0, 0], [65532, 0, 0, 0, 0, 0, 0, 0], [65534, 0, 0, 0, 0, 0, 0, 0], [65535, 0, 0, 0, 0, 0, 0, 0], [65535, 32768, 0, 0, 0, 0, 0, 0], [65535, 49152, 0, 0, 0, 0, 0, 0], [65535, 57344, 0, 0, 0, 0, 0, 0], [65535, 61440, 0, 0, 0, 0, 0, 0], [65535, 63488, 0, 0, 0, 0, 0, 0], [65535, 64512, 0, 0, 0, 0, 0, 0], [65535, 65024, 0, 0, 0, 0, 0, 0], [65535, 65280, 0, 0, 0, 0, 0, 0], [65535, 65408, 0, 0, 0, 0, 0, 0], [65535, 65472, 0, 0, 0, 0, 0, 0], [65535, 65504, 0, 0, 0, 0, 0, 0], [65535, 65520, 0, 0, 0, 0, 0, 0], [65535, 65528, 0, 0, 0, 0, 0, 0], [65535, 65532, 0, 0, 0, 0, 0, 0], [65535, 65534, 0, 0, 0, 0, 0, 0], [65535, 65535, 0, 0, 0, 0, 0, 0], [65535, 65535, 32768, 0, 0, 0, 0, 0], [65535, 65535, 49152, 0, 0, 0, 0, 0], [65535, 65535, 57344, 0, 0, 0, 0, 0], [65535, 65535, 61440, 0, 0, 0, 0, 0], [65535, 65535, 63488, 0, 0, 0, 0, 0], [65535, 65535, 64512, 0, 0, 0, 0, 0], [65535, 65535, 65024, 0, 0, 0, 0, 0], [65535, 65535, 65280, 0, 0, 0, 0, 0], [65535, 65535, 65408, 0, 0, 0, 0, 0], [65535, 65535, 65472, 0, 0, 0, 0, 0], [65535, 65535, 65504, 0, 0, 0, 0, 0], [65535, 65535, 65520, 0, 0, 0, 0, 0], [65535, 65535, 65528, 0, 0, 0, 0, 0], [65535, 65535, 65532, 0, 0, 0, 0, 0], [65535, 65535, 65534, 0, 0, 0, 0, 0], [65535, 65535, 65535, 0, 0, 0, 0, 0], [65535, 65535, 65535, 32768, 0, 0, 0, 0], [65535, 65535, 65535, 49152, 0, 0, 0, 0], [65535, 65535, 65535, 57344, 0, 0, 0, 0], [65535, 65535, 65535, 61440, 0, 0, 0, 0], [65535, 65535, 65535, 63488, 0, 0, 0, 0], [65535, 65535, 65535, 64512, 0, 0, 0, 0], [65535, 65535, 65535, 65024, 0, 0, 0, 0], [65535, 65535, 65535, 65280, 0, 0, 0, 0], [65535, 65535, 65535, 65408, 0, 0, 0, 0], [65535, 65535, 65535, 65472, 0, 0, 0, 0], [65535, 65535, 65535, 65504, 0, 0, 0, 0], [65535, 65535, 65535, 65520, 0, 0, 0, 0], [65535, 65535, 65535, 65528, 0, 0, 0, 0], [65535, 65535, 65535, 65532, 0, 0, 0, 0], [65535, 65535, 65535, 65534, 0, 0, 0, 0], [65535, 65535, 65535, 65535, 0, 0, 0, 0], [65535, 65535, 65535, 65535, 32768, 0, 0, 0], [65535, 65535, 65535, 65535, 49152, 0, 0, 0], [65535, 65535, 65535, 65535, 57344, 0, 0, 0], [65535, 65535, 65535, 65535, 61440, 0, 0, 0], [65535, 65535, 65535, 65535, 63488, 0, 0, 0], [65535, 65535, 65535, 65535, 64512, 0, 0, 0], [65535, 65535, 65535, 65535, 65024, 0, 0, 0], [65535, 65535, 65535, 65535, 65280, 0, 0, 0], [65535, 65535, 65535, 65535, 65408, 0, 0, 0], [65535, 65535, 65535, 65535, 65472, 0, 0, 0], [65535, 65535, 65535, 65535, 65504, 0, 0, 0], [65535, 65535, 65535, 65535, 65520, 0, 0, 0], [65535, 65535, 65535, 65535, 65528, 0, 0, 0], [65535, 65535, 65535, 65535, 65532, 0, 0, 0], [65535, 65535, 65535, 65535, 65534, 0, 0, 0], [65535, 65535, 65535, 65535, 65535, 0, 0, 0], [65535, 65535, 65535, 65535, 65535, 32768, 0, 0], [65535, 65535, 65535, 65535, 65535, 49152, 0, 0], [65535, 65535, 65535, 65535, 65535, 57344, 0, 0], [65535, 65535, 65535, 65535, 65535, 61440, 0, 0], [65535, 65535, 65535, 65535, 65535, 63488, 0, 0], [65535, 65535, 65535, 65535, 65535, 64512, 0, 0], [65535, 65535, 65535, 65535, 65535, 65024, 0, 0], [65535, 65535, 65535, 65535, 65535, 65280, 0, 0], [65535, 65535, 65535, 65535, 65535, 65408, 0, 0], [65535, 65535, 65535, 65535, 65535, 65472, 0, 0], [65535, 65535, 65535, 65535, 65535, 65504, 0, 0], [65535, 65535, 65535, 65535, 65535, 65520, 0, 0], [65535, 65535, 65535, 65535, 65535, 65528, 0, 0], [65535, 65535, 65535, 65535, 65535, 65532, 0, 0], [65535, 65535, 65535, 65535, 65535, 65534, 0, 0], [65535, 65535, 65535, 65535, 65535, 65535, 0, 0], [65535, 65535, 65535, 65535, 65535, 65535, 32768, 0], [65535, 65535, 65535, 65535, 65535, 65535, 49152, 0], [65535, 65535, 65535, 65535, 65535, 65535, 57344, 0], [65535, 65535, 65535, 65535, 65535, 65535, 61440, 0], [65535, 65535, 65535, 65535, 65535, 65535, 63488, 0], [65535, 65535, 65535, 65535, 65535, 65535, 64512, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65024, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65280, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65408, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65472, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65504, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65520, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65528, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65532, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65534, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 0], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 32768], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 49152], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 57344], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 61440], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 63488], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 64512], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65024], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65280], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65408], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65472], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65504], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65520], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65528], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65532], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65534], [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535]];;

export {
    isIPv4Address,
    isIPv6Address,
    isIPv6AddressWithoutEmpty,
    convertToIPv6AddressWithoutEmptyAndSeparator,
    convertToIPv6AddressWithoutEmpty,
    getPtrAcceptableAddress,
    IPv4OctetBasedNetMasks,
    IPv6OctetBasedNetMasks,
}